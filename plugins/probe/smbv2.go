package probe

import (
	"cube/log"
	"cube/model"
	"fmt"
	"net"
)

var NegotiateSMBv2Data1 = []byte{
	0x00, 0x00, 0x00, 0x45, 0xFF, 0x53, 0x4D, 0x42, 0x72, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x01, 0x48, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
	0xAC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x02,
	0x4E, 0x54, 0x20, 0x4C, 0x4D, 0x20, 0x30, 0x2E, 0x31, 0x32,
	0x00, 0x02, 0x53, 0x4D, 0x42, 0x20, 0x32, 0x2E, 0x30, 0x30,
	0x32, 0x00, 0x02, 0x53, 0x4D, 0x42, 0x20, 0x32, 0x2E, 0x3F,
	0x3F, 0x3F, 0x00,
}
var NegotiateSMBv2Data2 = []byte{
	0x00, 0x00, 0x00, 0x68, 0xFE, 0x53, 0x4D, 0x42, 0x40, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00,
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x10, 0x02,
}

var Flags [4]byte
var NTLMSSPNegotiateData = []byte{
	0x00, 0x00, 0x00, 0x9A, 0xFE, 0x53, 0x4D, 0x42, 0x40, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x58, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x60, 0x40, 0x06, 0x06, 0x2B, 0x06, 0x01, 0x05,
	0x05, 0x02, 0xA0, 0x36, 0x30, 0x34, 0xA0, 0x0E, 0x30, 0x0C,
	0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02,
	0x02, 0x0A, 0xA2, 0x22, 0x04, 0x20, 0x4E, 0x54, 0x4C, 0x4D,
	0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00,
	Flags[0], Flags[1],
	Flags[2], Flags[3],
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

func SmbProbeV2(task model.ProbeTask) (result model.ProbeTaskResult) {
	result = model.ProbeTaskResult{ProbeTask: task, Result: "", Err: nil}
	realhost := fmt.Sprintf("%s:%v", task.Ip, task.Port)
	conn, err := net.DialTimeout("tcp", realhost, model.ConnectTimeout)
	if err != nil {
		log.Debug(err)
		return
	}
	_, err = conn.Write(NegotiateSMBv2Data1)
	if err != nil {
		return
	}
	r1, _ := readBytes(conn)

	fmt.Printf("%x\n", r1)
	fmt.Printf("%x\n", r1[70:])
	//_, err = conn.Write(NegotiateSMBv2Data2)
	//if err != nil {
	//	return
	//}
	//
	//
	//ret, err := readBytes(conn)
	//
	//if err != nil || len(ret) < 45 {
	//	return
	//}

	//blob_length := uint16(bytes2Uint(ret[43:45], '<'))
	//blob_count := uint16(bytes2Uint(ret[45:47], '<'))
	//
	//
	//gss_native := ret[47:]
	//off_ntlm := bytes.Index(gss_native, []byte("NTLMSSP"))
	//
	//native := gss_native[int(blob_length):blob_count]
	//ss := strings.Split(string(native), "\x00\x00")
	//
	//bs := gss_native[off_ntlm:blob_length]
	//type2 := ntlmssp.ChallengeMsg{}
	//tinfo := "\n" + type2.String(bs)
	//
	//NativeOS := TrimName(ss[0])
	//NativeLM := TrimName(ss[1])
	//tinfo += fmt.Sprintf("NativeOS: %s\nNativeLM: %s\n%s", NativeOS, NativeLM, strings.Repeat("<", 50))
	//result.Result = tinfo

	return result
}
